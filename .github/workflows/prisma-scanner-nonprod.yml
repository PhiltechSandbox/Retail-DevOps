name: prisma-scanner-nonprod

on:
 workflow_dispatch:
 
env: 
  ACTIONSFILE: Actionsfile/dev
  TAG: np-${{ github.run_id }}-${{ github.run_number }}
jobs:
  Maven_Build:
    runs-on: [ pilot ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: 8
          #distribution: 'adopt'
          #cache: maven
      - name: Build with Maven 
        run: |
          cp /home/es00gh/.m2/settings.xml .
          #chmod +x mvnw
          ls -l 
          mvn clean install --settings settings.xml

         
      - uses: actions/upload-artifact@v2
        with:
          name: AppArtifacts
          path: |
            **/*.war
            settings.xml
          
#  Sonarqube_Analysis:
#    runs-on: [ pilot ]
#    needs: Maven_Build
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up JDK 8
#        uses: actions/setup-java@v2
#        with:
#          java-version: 8
#          distribution: 'adopt'
#          #cache: maven
#      - name: Download Artifact.
#        uses: actions/download-artifact@v2
#        with:
#          name: AppArtifacts   
#      - name: Build and Sonar analyze
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  
#        run: |
#          export GIT_COMMIT=`git rev-parse --short HEAD`
#          echo ${GIT_COMMIT}
#          cp /home/es00gh/.m2/settings.xml .
#          mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install org.jacoco:jacoco-maven-plugin:report  --settings settings.xml
#          export JAVA_HOME=/usr/lib/jvm/jdk11/jdk-11.0.9.1+1
#          mvn sonar:sonar -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }}  --settings settings.xml

          
  
#  Veracode_scan:
#    runs-on: [ pilot  ]
#    needs: Sonarqube_Analysis
#    steps:
#      - uses: actions/checkout@v2    
#      - name: Download Artifact.
#        uses: actions/download-artifact@v2
#        with:
#          name: AppArtifacts           
#      - name: veracode scan
#        continue-on-error: true
#        uses: albertsons/esgh-actions-veracode@master
#        with:
#          filepath: '*/target/*.war'
#          vid: '${{ secrets.VERACODEID }}'
#          vkey: '${{ secrets.VERACODEKEY }}'
#          appname: RCDO
#          createsandbox: ''
#          sandboxname: ''
#          scantimeout: 15
#          exclude: '*.js'
#          include: '*.war'
#          criticality: 'VeryHigh'
#          #AbortOnFail: 'false'       
#   Junit_test_and_report:
#     runs-on: [ linux-2 ]
#     needs: Veracode_scan
#     steps:
#      - uses: actions/checkout@v2
#      - name: Set up JDK '${{ inputs.javaVersion }}'
#        uses: actions/setup-java@v1
#        with:
#           java-version: '${{ inputs.javaVersion }}'
#           #distribution: '<distribution>'
#           #cache: maven
#      - name: Run tests with Maven
#        run: |
#         cp /home/es00gh/.m2/settings.xml .
#         mvn -B test --file pom.xml --settings settings.xml
#        #run: mvn clean test  
#      - name: Download Artifact.
#        uses: actions/download-artifact@v2
#        with:
#          name: AppArtifacts           
#      - name: Publish Unit Test Results  
#        uses: albertsons/esgh-actions-publish-unit-test-result@v1    
#        if: always()
#        with:
#          files: "target/surefire-reports/*.xml"        
  Docker_build:
    runs-on: [ jenkins-sl1 ]
    needs: Maven_Build
    steps:
      - uses: actions/checkout@v2    
      - name: Download Artifact Jarfile.
        uses: actions/download-artifact@v2
        with:
          name: AppArtifacts 
      - name: Read application properties file
        id: appcode
        uses: albertsons/esgh-actions-jsonread@release
        with:
           path: ${{ env.ACTIONSFILE }}
           prop_path: application_properties.APPCODE           
      - name: Read application properties file
        id: app_name
        uses: albertsons/esgh-actions-jsonread@release
        with:
           path: ${{ env.ACTIONSFILE }}
           prop_path: application_properties.APP_NAME
      - name: Read application properties file
        id: registry_url
        uses: albertsons/esgh-actions-jsonread@release
        with:
           path: ${{ env.ACTIONSFILE }}
           prop_path: application_properties.REGISTRY_URL                
      - name: Docker Build     
        uses: albertsons/esgh-docker-login@v1
        with:
          registry: ${{ steps.registry_url.outputs.prop }}
          username: ${{ secrets.ACR_USER }}
          password: ${{ secrets.ACR_PWD }}          
      - run: |
          docker build --tag ${{ steps.registry_url.outputs.prop }}/${{ steps.appcode.outputs.prop }}/${{ steps.app_name.outputs.prop }}:${{ env.TAG }} .
  Twistlock_scan:
    runs-on: [ jenkins-sl1 ]
    needs: Docker_build
    steps:
      - uses: actions/checkout@v2    
      - name: Read application properties file
        id: appcode
        uses: albertsons/esgh-actions-jsonread@release
        with:
           path: ${{ env.ACTIONSFILE }}
           prop_path: application_properties.APPCODE
      - name: Read application properties file
        id: app_name
        uses: albertsons/esgh-actions-jsonread@release
        with:
           path: ${{ env.ACTIONSFILE }}
           prop_path: application_properties.APP_NAME
      - name: Read application properties file
        id: registry_url
        uses: albertsons/esgh-actions-jsonread@release
        with:
           path: ${{ env.ACTIONSFILE }}
           prop_path: application_properties.REGISTRY_URL           
      - uses: albertsons/esgh-actions-twistlock@main
        with:
          tl-username: ${{ secrets.TL_USERNAME }}
          tl-password: ${{ secrets.TL_PASSWORD }}
          tl-console-url: https://us-east1.cloud.twistlock.com/us-2-158288594
          docker-image: ${{ steps.registry_url.outputs.prop }}/${{ steps.appcode.outputs.prop }}/${{ steps.app_name.outputs.prop }}:${{ env.TAG }}          
#      - name: Docker login and Push Image to registry     
#        uses: albertsons/esgh-docker-login@v1
#        with:
#          registry: ${{ steps.registry_url.outputs.prop }}
#          username: ${{ secrets.ACR_USER }}
#          password: ${{ secrets.ACR_PWD }} 
#      - run: |
#          docker push ${{ steps.registry_url.outputs.prop }}/${{ steps.appcode.outputs.prop }}/${{ steps.app_name.outputs.prop }}:${{ env.TAG }}
  
